#include<GL/glut.h>	
#include<cmath>
#include<string.h>
static double cx = 100;
static double cy = 50;
static double cz = 100;

static int spinx = 0;
static int spiny = 0;
static int spinz = 0;

static double x = 0.0;
static double y = 0.0;
static double z = 0.0;

static int spinxs[150];
static int spinys[150];
static int spinzs[150];

float sx[150];
float sy[150];
float sz[150];
float sa[150];
float ss[150];

int i = 0;
int red = 0, green = 0, blue = 0;
int first = 1, sec = 2;
int help = 0, level = 0, menu = 1;

void sphere(float r, float g, float b, float a)
{
	glColor4f(r, g, b, a);
	glutSolidSphere(4, 32, 32);
}


void smoke(float size, float alpha, float R, float G, float B)
{
	glPushMatrix();
	glColor4f(R, G, B, alpha);
	glTranslatef(0, 0, -15);
	glutSolidSphere((1 + size), 16, 16);
	glPopMatrix();
}

void drawSmoke(float R, float G, float B, float x, float y, int reflect)
{

	for (int xi = 0; xi < 150; xi++)
	{
		sa[xi] = sa[xi] - 0.0011;
		ss[xi] = ss[xi] + 0.005;
		glPushMatrix();
		glScalef(reflect*0.5, reflect*0.5, 0.5);
		glTranslatef((reflect*sx[xi]) - x, sy[xi] - y, sz[xi]);
		glRotatef(spinxs[xi], 1, 0, 0);
		glRotatef(reflect*spinys[xi], 0, 1, 0);
		glRotatef(reflect*spinzs[xi], 0, 0, 1);
		smoke(ss[xi], sa[xi], R, G, B);
		glPopMatrix();
	}
}


void slab(float r, float g, float b)
{
	glColor3f(r, g, b);
	glutSolidCube(1);
}
void bridge()
{
	glPushMatrix();
	glScalef(20, 1, 10);
	slab(0.5, 0.5, 0.5);
	glPopMatrix();

	glPushMatrix();
	glScalef(20, 2, 1);
	glTranslatef(0, 0.75, 4.5);
	slab(0.3, 0.3, 0.3);
	glPopMatrix();

	glPushMatrix();
	glScalef(20, 2, 1);
	glTranslatef(0, 0.75, -4.5);
	slab(0.3, 0.3, 0.3);
	glPopMatrix();

	glPushMatrix();
	glScalef(1, 4, 1);
	glTranslatef(0, -0.65, 4.5);
	slab(0.3, 0.3, 0.3);
	glPopMatrix();

	glPushMatrix();
	glScalef(1, 4, 1);
	glTranslatef(0, -0.65, -4.5);
	slab(0.3, 0.3, 0.3);
	glPopMatrix();
}
void ground()
{
	glBegin(GL_POLYGON);
	glColor3f(0, 0.33, 0.16);
	glVertex3f(-100, 0, 100);
	glVertex3f(0, 0, 100);
	glVertex3f(-30, 0, 50);
	glVertex3f(0, 0, 0);
	glVertex3f(-50, 0, -100);
	glVertex3f(-100, 0, -100);
	glEnd();

	glBegin(GL_POLYGON);
	glColor3f(0, 0.33, 0.16);
	glVertex3f(10, 0, 0);
	glVertex3f(-20, 0, 50);
	glVertex3f(10, 0, 100);
	glVertex3f(100, 0, 100);
	glVertex3f(100, 0, -100);
	glVertex3f(-40, 0, -100);
	glEnd();

	glBegin(GL_POLYGON);
	glColor3f(0.4, 0.2, 0.16);
	glVertex3f(0, -10, 100);
	glVertex3f(-30, -10, 50);
	glVertex3f(-30, 0, 50);
	glVertex3f(0, 0, 100);
	glEnd();

	glBegin(GL_POLYGON);
	glColor3f(0.4, 0.25, 0.16);
	glVertex3f(-30, -10, 50);
	glVertex3f(0, -10, 0);
	glVertex3f(0, 0, 0);
	glVertex3f(-30, 0, 50);
	glEnd();

	glBegin(GL_POLYGON);
	glColor3f(0.4, 0.2, 0.16);
	glVertex3f(0, -10, 0);
	glVertex3f(-50, -10, -100);
	glVertex3f(-50, 0, -100);
	glVertex3f(0, 0, 0);
	glEnd();

	glBegin(GL_POLYGON);
	glColor3f(0.4, 0.25, 0.16);
	glVertex3f(-40, -10, -100);
	glVertex3f(10, -10, 0);
	glVertex3f(10, 0, 0);
	glVertex3f(-40, 0, -100);
	glEnd();

	glBegin(GL_POLYGON);
	glColor3f(0.4, 0.25, 0.16);
	glVertex3f(10, -10, 0);
	glVertex3f(-20, -10, 50);
	glVertex3f(-20, 0, 50);
	glVertex3f(10, 0, 0);
	glEnd();

	glBegin(GL_POLYGON);
	glColor3f(0.4, 0.25, 0.16);
	glVertex3f(-20, -10, 50);
	glVertex3f(10, -10, 100);
	glVertex3f(10, 0, 100);
	glVertex3f(-20, 0, 50);
	glEnd();

	glBegin(GL_POLYGON);
	glColor4f(0, 0.6, 0.6, 0.5);
	glVertex3f(-100, -2, 100);
	glVertex3f(100, -2, 100);
	glVertex3f(100, -2, -100);
	glVertex3f(-100, -2, -100);
	glEnd();
}


void wing(int Colour)
{
	float rs = 0;
	float re = 0;
	float bs = 0;
	float be = 0;
	float gs = 0;
	float ge = 0;

	if (Colour == 1) {
		rs = 0.75;
		re = 0.5;
	}
	else if (Colour == 2) {
		gs = 0.75;
		ge = 0.5;
	}
	else if (Colour == 3) {
		bs = 0.75;
		be = 0.5;
	}
	glBegin(GL_POLYGON);
	glColor3f(re, ge, be);
	glVertex3f(1.5, -1, 10);
	glVertex3f(25, -0.25, 0);
	glVertex3f(25, 0.25, 0);
	glVertex3f(1.5, 1, 10);
	glEnd();

	glBegin(GL_POLYGON);
	glColor3f(re, ge, be);
	glVertex3f(1.5, 1, -1);
	glVertex3f(25, 0.25, -7);
	glVertex3f(25, -0.25, -7);
	glVertex3f(1.5, -1, -1);
	glEnd();

	glBegin(GL_POLYGON);
	glColor3f(rs, gs, bs);
	glVertex3f(1.5, 1, 10);
	glVertex3f(25, 0.25, 0);
	glVertex3f(25, 0.25, -7);
	glVertex3f(1.5, 1, -1);
	glEnd();

	glBegin(GL_POLYGON);
	glColor3f(rs, gs, bs);
	glVertex3f(1.5, -1, -1);
	glVertex3f(25, -0.25, -7);
	glVertex3f(25, -0.25, 0);
	glVertex3f(1.5, -1, 10);
	glEnd();

	glBegin(GL_POLYGON);
	glColor3f(re, ge, be);
	glVertex3f(25, -0.25, 0);
	glVertex3f(25, -0.25, -7);
	glVertex3f(25, 0.25, -7);
	glVertex3f(25, 0.25, 0);
	glEnd();
}

void fin(int Colour)
{
	float rs = 0;
	float re = 0;
	float bs = 0;
	float be = 0;
	float gs = 0;
	float ge = 0;

	if (Colour == 1) {
		rs = 0.75;
		re = 0.5;
	}
	else if (Colour == 2) {
		gs = 0.75;
		ge = 0.5;
	}
	else if (Colour == 3) {
		bs = 0.75;
		be = 0.5;
	}

	glBegin(GL_POLYGON);
	glColor3f(re, ge, be);
	glVertex3f(-0.5, 2, -7);
	glVertex3f(0.5, 2, -7);
	glVertex3f(0, 9.5, -10);
	glEnd();

	glBegin(GL_POLYGON);
	glColor3f(re, ge, be);
	glVertex3f(0, 9.5, -12);
	glVertex3f(0.5, 2, -11);
	glVertex3f(-0.5, 2, -11);
	glEnd();

	glBegin(GL_POLYGON);
	glColor3f(rs, gs, bs);
	glVertex3f(0.5, 2, -7);
	glVertex3f(0.5, 2, -11);
	glVertex3f(0, 9.5, -12);
	glVertex3f(0, 9.5, -10);
	glEnd();

	glBegin(GL_POLYGON);
	glColor3f(rs, gs, bs);
	glVertex3f(0, 9.5, -10);
	glVertex3f(0, 9.5, -12);
	glVertex3f(-0.5, 2, -11);
	glVertex3f(-0.5, 2, -7);
	glEnd();
}
void plane(int Colour)
{
	float rb = 0;
	float gb = 0;
	float bb = 0;

	if (Colour == 1) {
		rb = 0.65;
	}
	else if (Colour == 2) {
		gb = 0.65;
	}
	else if (Colour == 3) {
		bb = 0.65;
	}
	glPushMatrix();
	glTranslatef(0, 0, 4);
	glScaled(1, 0.8, 5);
	sphere(rb, gb, bb, 1);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(0, 2, 16);
	glScaled(0.5, 0.4, 0.75);
	sphere(0, 0, 0, 0.75);
	glPopMatrix();

	wing(Colour);

	glPushMatrix();
	glScalef(-1, -1, 1);
	wing(Colour);
	glPopMatrix();

	glPushMatrix();
	glScalef(0.4, 0.4, 0.4);
	glTranslatef(0, 3, -25);
	wing(Colour);
	glPopMatrix();

	glPushMatrix();
	glScalef(-0.4, -0.4, 0.4);
	glTranslatef(0, -3, -25);
	wing(Colour);
	glPopMatrix();

	fin(Colour);
}
void cloud()
{
	glPushMatrix();
	glScalef(1.5, 1, 1.25);
	glTranslatef(0, 12, 0);
	sphere(1, 1, 1, 0.9);
	glPopMatrix();

	glPushMatrix();
	glScalef(1.5, 1, 1.25);
	glTranslatef(0, 5, 3);
	sphere(1, 1, 1, 0.9);
	glPopMatrix();

	glPushMatrix();
	glScalef(1.5, 1, 1.25);
	glTranslatef(4, 7, 0);
	sphere(1, 1, 1, 0.9);
	glPopMatrix();

	glPushMatrix();
	glScalef(1.5, 1, 1.25);
	glTranslatef(-4, 7, 0);
	sphere(1, 1, 1, 0.9);
	glPopMatrix();

	glPushMatrix();
	glScalef(2, 1.5, 2);
	glTranslatef(0, 5, 0);
	sphere(1, 1, 1, 0.5);
	glPopMatrix();
}
void DrawTextXY(double x, double y, double z, double scale, const char *s)
{

	int i, l = strlen(s);
	glPushMatrix();
	glTranslatef(x, y, z);
	glScalef(scale, scale, scale);
	for (i = 0;i <l;i++)
		glutStrokeCharacter(GLUT_STROKE_ROMAN, s[i]);
	glPopMatrix();
}
void reshape2(int width, int height)
{
	glViewport(0, 0, width, height);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(50.0, 1.0, 15.0, 600.0);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}
void reshape1(int w, int h)
{
	glClearColor(1.0, 0.5, 0.25, 1.0);
	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	if (w <= h) 
		glOrtho(-2.0, 2.0, -2.0*(GLfloat)h / (GLfloat)w, 2.0*(GLfloat)h / (GLfloat)w, -10.0, 10.0);
	else
		glOrtho(-2.0*(GLfloat)w / (GLfloat)h, 2.0*(GLfloat)w / (GLfloat)h, -2.0, 2.0, -10.0, 10.0);
}
void display1(void)
{
	if (menu == 1)
	{
		glClear(GL_COLOR_BUFFER_BIT);
		glColor3f(1.0, 1.0, 1.0);
		DrawTextXY(-0.8, 0.5, 0.0, 0.0015, "Press C to continue  ");
		glutSwapBuffers();
		glFlush();
	}
	if (level == 1)
	{
		glClear(GL_COLOR_BUFFER_BIT);
		glColor3f(0.0, 0.0, 0.0);
		DrawTextXY(-2.5, 1.5, 0.0, 0.003,"SIMULATION OF PLANES");
		DrawTextXY(-1.25, 0.5, 0.0, 0.001, "     1: Help");
		DrawTextXY(-1.25, 0.25, 0.0, 0.001, "     2: Plane Simulation");
		DrawTextXY(-1.25, 0.0, 0.0, 0.001, " choose any one of the above..........");
		glutSwapBuffers();
		glFlush();

	}
	if (help == 1)
	{
		glClear(GL_COLOR_BUFFER_BIT);
		glColor3f(0.0, 0.0, 0.0);
		DrawTextXY(-1.85, 1.25, 0.0, 0.001, "to see output choose 2nd option in previous page ");
		DrawTextXY(-1.85, 1.0, 0.0, 0.001, "press 'r' 'g' or 'b' to introduce red, green or blue planes respectively");
		DrawTextXY(-1.85, 0.75, 0.0, 0.001, "press '1' '2' or '3' to remove red, green or blue planes respectively");
		DrawTextXY(-1.85, 0.5, 0.0, 0.001, "right click to move the plane in curvy motion");
		DrawTextXY(-1.85, 0.25, 0.0, 0.001, "left click to see them moving in a straight line ");
		DrawTextXY(-1.85, 0.0, 0.0, 0.001, "to see the whole ground view just press right mouse button");
		DrawTextXY(-1.85, -0.25, 0.0, 0.001, "if u press 'c' u can reset the planes  ");
		DrawTextXY(-1.85, -0.50, 0.0, 0.001, "if u press key 'q' u can exit from program  ");
		DrawTextXY(-2.5, -1.75, 0, 0.001, "press 'b' to go to previous page ");
		glutSwapBuffers();
		glFlush();
	}


}
void display2(void)
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();

	gluLookAt(cx, cy, cz, x / 2, y / 2, z / 2, 0.0, 1.0, 0.0);

	sx[i] = x;
	sy[i] = y;
	sz[i] = z;
	spinxs[i] = spinx;
	spinys[i] = spiny;
	spinzs[i] = spinz;
	sa[i] = 1;
	ss[i] = 0;

	for (int b = 0; b < 600; b = b + 20)
	{
		glPushMatrix();
		glTranslatef(-300 + b, -47, 0);
		bridge();
		glPopMatrix();
	}
	glPushMatrix();
	glScalef(-1, -1, 1);
	glTranslatef(0, 56, 0);
	bridge();
	glPopMatrix();
	glPushMatrix();
	glScalef(-1, -1, 1);
	glTranslatef(-20, 56, 0);
	bridge();
	glPopMatrix();


	if (red == 1)
	{
		glPushMatrix();
		glScalef(-0.5, -0.5, 0.5);
		glTranslatef(-x + 60, y + 130, z);
		glRotatef(spinx, 1, 0, 0);
		glRotatef(spiny, 0, 1, 0);
		glRotatef(spinz, 0, 0, 1);
		plane(1);
		glPopMatrix();
	}

	if (green == 1)
	{
		glPushMatrix();
		glScalef(-0.5, -0.5, 0.5);
		glTranslatef(-x, y + 130, z);
		glRotatef(spinx, 1, 0, 0);
		glRotatef(spiny, 0, 1, 0);
		glRotatef(spinz, 0, 0, 1);
		plane(2);
		glPopMatrix();
	}


	if (blue == 1)
	{
		glPushMatrix();
		glScalef(-0.5, -0.5, 0.5);
		glTranslatef(-x - 60, y + 130, z);
		glRotatef(spinx, 1, 0, 0);
		glRotatef(-spiny, 0, 1, 0);
		glRotatef(-spinz, 0, 0, 1);
		plane(3);
		glPopMatrix();
	}

	if (red == 1)
		drawSmoke(0, 1, 1, -60, -130, -1);
	if (green == 1)
		drawSmoke(1, 0, 1, 0, -130, -1);
	if (blue == 1)
		drawSmoke(1, 1, 0, 60, -130, -1);

	glPushMatrix();
	glScalef(3, 1, 3);
	glTranslatef(0, -50, 0);
	ground();
	glPopMatrix();

	if (red == 1)
	{
		glPushMatrix();
		glScalef(0.5, 0.5, 0.5);
		glTranslatef(x - 60, y, z);
		glRotatef(spinx, 1, 0, 0);
		glRotatef(spiny, 0, 1, 0);
		glRotatef(spinz, 0, 0, 1);
		plane(1);
		glPopMatrix();
	}

	if (green == 1)
	{
		glPushMatrix();
		glScalef(0.5, 0.5, 0.5);
		glTranslatef(x, y, z);
		glRotatef(spinx, 1, 0, 0);
		glRotatef(spiny, 0, 1, 0);
		glRotatef(spinz, 0, 0, 1);
		plane(2);
		glPopMatrix();
	}

	if (blue == 1)
	{
		glPushMatrix();
		glScalef(0.5, 0.5, 0.5);
		glTranslatef(x + 60, y, z);
		glRotatef(spinx, 1, 0, 0);
		glRotatef(spiny, 0, 1, 0);
		glRotatef(spinz, 0, 0, 1);
		plane(3);
		glPopMatrix();
	}

	if (red == 1)
		drawSmoke(0, 1, 1, 60, 0, 1);
	if (green == 1)
		drawSmoke(1, 0, 1, 0, 0, 1);
	if (blue == 1)
		drawSmoke(1, 1, 0, -60, 0, 1);

	i++;
	if (i > 149) i = 0;

	glPushMatrix();
	glTranslatef(-40, 10, 0);
	glScalef(2, 1.5, 2);
	cloud();
	glPopMatrix();

	glPushMatrix();
	glTranslatef(40, 10, 0);
	glScalef(1.5, 1, 1.5);
	cloud();
	glPopMatrix();

	glPushMatrix();
	glTranslatef(0, 20, -70);
	glRotatef(45, 0, 1, 0);
	glScalef(1, 1, 1);
	cloud();
	glPopMatrix();

	glPushMatrix();
	glTranslatef(30, 20, 70);
	glRotatef(45, 1, 0, 0);
	glScalef(0.5, 0.5, 0.5);
	cloud();
	glPopMatrix();

	glPushMatrix();
	glTranslatef(-70, 20, 70);
	glRotatef(35, 0, 1, 0);
	glScalef(2, 1, 2);
	cloud();
	glPopMatrix();
	glutSwapBuffers();
	glFlush();

}

void init(void)
{
	glClearColor(0.45, 0.8, 0.88, 0);

	glEnable(GL_DEPTH_TEST);

	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	glAlphaFunc(GL_GREATER, 0. / 255.);
	glEnable(GL_CULL_FACE);
	glCullFace(GL_BACK);

}

void forward(int dir)
{
	float xrad; float yrad; float zrad;
	xrad = (spinx * 3.141592654) / 180;
	yrad = (spiny * 3.141592654) / 180;
	zrad = (spinz * 3.141592654) / 180;

	if (spinx <90)
	{
		z = z + (dir*(cos(yrad)));
	}
	else if (spinx == 90 || spinx == 270)
	{
		z = z;
	}
	else if (spinx <270)
	{
		z = z - (dir*(cos(yrad)));
	}
	else
	{
		z = z + (dir*(cos(yrad)));
	}
	x = x + (dir*(sin(yrad)));

	if (spiny <90)
	{
		y = y - (dir*(sin(xrad)));
	}
	else if (spiny == 90 || spiny == 270)
	{
		y = y;
	}
	else if (spiny <270)
	{
		y = y + (dir*(sin(xrad)));
	}
	else
	{
		y = y - (dir*(sin(xrad)));
	}
}
void straight()
{
	if (spinz >= 360)
	{
		spinz = 0;
	}
	spinz = (spinz + 10) % 360;
	forward(1);
	glutPostRedisplay();
}

void curve()
{
	if (spiny >= 360) {
		spiny = 0;
	}
	spiny = (spiny + 1) % 360;
	forward(1);
	glutPostRedisplay();

}

void mouse(int btn, int state, int x, int y)
{
	switch (btn)
	{
	case GLUT_LEFT_BUTTON:
		if (state == GLUT_DOWN)
		{
			glutIdleFunc(straight);
			break;
		}

	case GLUT_RIGHT_BUTTON:
		if (state == GLUT_DOWN)
		{
			glutIdleFunc(curve);
			break;
		}
	}
}

void kick()
{}

void keyboard2(unsigned char key, int u, int v)
{
	switch (key)
	{

	case 'c':
		spinx = 0.0;
		spiny = 0.0;
		spinz = 0.0;
		x = 0.0;
		y = 0.0;
		z = 0.0;

		for (i = 0; i<150; i++)
		{
			sx[i] = x;
			sy[i] = y;
			sz[i] = z;
			spinxs[i] = spinx;
			spinys[i] = spiny;
			spinzs[i] = spinz;
			sa[i] = 1;
			ss[i] = 0;
		}
		red = 0;
		green = 0;
		blue = 0;
		glutIdleFunc(kick);
		glutPostRedisplay();
		break;
	case 'r': red = 1;
		break;
	case 'g': green = 1;
		break;
	case 'b': blue = 1;
		break;
	case 49: red = 0;
		break;
	case 50: green = 0;
		break;
	case 51: blue = 0;
		break;
	case 'q': exit(0);
		break;
	}
	glutPostRedisplay();
}

void keyboard1(unsigned char key, int x, int y)
{
	if (key == 'c' || key == 'C')
	{
		level = 1;
	}
	if (level == 1)
	{
		if (key == 49)
		{
			help = 1;
			level = 0;
		}
		if (key == 50)
		{
			glutDestroyWindow(first);
			sec = glutCreateWindow("home");
			init();
			glutReshapeFunc(reshape2);
			glutKeyboardFunc(keyboard2);
			glutDisplayFunc(display2);
			glutMouseFunc(mouse);
			glutMainLoop();
		}
	}
	if (help == 1)
	{
		if (key == 'b')
		{
			help = 0;
			level = 1;
		}
	}
	glutPostRedisplay();
}

int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
	glEnable(GL_DEPTH_TEST);
	glutInitWindowSize(600, 600);
	glutInitWindowPosition(0, 0);
	first = glutCreateWindow("Opening Window");
	glutDisplayFunc(display1);
	glutReshapeFunc(reshape1);
	glutKeyboardFunc(keyboard1);
	glutMainLoop();
	return 0;
}








